// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: Uncomment the below line and comment out line 11 to for convenient local development
    // provider = "sqlite"
    provider     = "postgresql"
    url          = env("DATABASE_URL")
}

model User {
    id               String            @id @default(cuid())
    name             String            @unique
    posts            Post[]
    comments         Comment[]
    postReactions    PostReaction[]
    commentReactions CommentReaction[]
}

model Media {
    id          String @id @default(cuid())
    externalId  String
    contentType String
    post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    postId      String

    @@index([postId])
}

model Post {
    id            String         @id @default(cuid())
    title         String
    body          String
    points        Int            @default(0)
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        String
    media         Media[]
    comments      Comment[]
    createdAt     DateTime       @default(now())
    postReactions PostReaction[]

    @@index([userId])
}

model Comment {
    id               String            @id @default(cuid())
    body             String
    points           Int               @default(0)
    deleted          Boolean           @default(false)
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId           String
    post             Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    postId           String
    parent           Comment?          @relation("ParentChildComments", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    parentId         String?
    children         Comment[]         @relation("ParentChildComments")
    createdAt        DateTime          @default(now())
    commentReactions CommentReaction[]

    @@index([userId])
    @@index([postId])
    @@index([parentId])
}

model PostReaction {
    userId String
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    postId String
    post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    isLike Boolean

    @@unique([userId, postId])
    @@index([postId])
}

model CommentReaction {
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    commentId String
    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    isLike    Boolean

    @@unique([userId, commentId])
    @@index([commentId])
}
